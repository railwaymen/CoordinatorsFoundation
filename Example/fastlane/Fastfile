default_platform(:ios)

podspec_path = "../CoordinatorsFoundation.podspec"
project = "CoordinatorsFoundation.xcodeproj"
workspace = "CoordinatorsFoundation.xcworkspace"
scheme = "CoordinatorsFoundation-Example"

platform :ios do

  before_all do
    xcversion(version: "10.3")
    if ENV['CI_PIPELINE_ID']
      increment_build_number(build_number: "#{ENV['CI_PIPELINE_ID']}")
    end
  end

  after_all do |lane|
  end

  error do |lane, exception|
  end

  #PUBLIC LANES
  desc "Run unit tests"
  lane :test do
    check_style
    scan
    xcov(
      scheme: scheme,
      workspace: workspace,
      json_report: true,
      markdown_report: true,
      output_directory: "output/tests/coverage/xcov",
      skip_slack: true
    )
    slather(
      scheme: scheme,
      workspace: workspace,
      proj: project,
      html: true,
      output_directory: "output/tests/coverage/slather",
      binary_basename: "CoordinatorsFoundation"
    )
  end

  desc "Release new version"
  lane :release do |options|
    pod_lib_lint(
      private: true,
      podspec: podspec_path
    )
    version = version_bump_podspec(
      path: podspec_path,
      bump_type: options.fetch(:bump_type, "patch")
    )
    git_add(path: podspec_path)
    git_commit(
      path: [podspec_path],
      message: "#{version} release"
    )
    add_git_tag(tag: "#{version}")
    push_to_git_remote
    pod_push(path: podspec_path, repo: "rwm_podspec")
  end

  #PRIVATE LANES
  private_lane :check_style do
    output_path="output/lint"
    output_file="#{output_path}/swiftlint.txt"

    sh("cd .. && mkdir -p #{output_path}")
    ENV["PATH"] = ["Pods/SwiftLint", ENV["PATH"]].join(":")
    swiftlint(output_file: output_file, reporter: "emoji")
  end
end
